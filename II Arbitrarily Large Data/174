;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |174|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp")) #f)))
; 1String -> String
; converts the given 1String to a 3-letter numeric String
 
(check-expect (encode-letter "z") (code1 "z"))
(check-expect (encode-letter "\t")
              (string-append "00" (code1 "\t")))
(check-expect (encode-letter "a")
              (string-append "0" (code1 "a")))
 
(define (encode-letter s)
  (cond
    [(>= (string->int s) 100) (code1 s)]
    [(< (string->int s) 10)
     (string-append "00" (code1 s))]
    [(< (string->int s) 100)
     (string-append "0" (code1 s))]))
 
; 1String -> String
; converts the given 1String into a String
 
(check-expect (code1 "z") "122")
 
(define (code1 c)
  (number->string (string->int c)))

; converts strings to ASCII 

; An LLS is one of: 
; – '()
; – (cons Los LLS)
; interpretation a list of lines, each is a list of Strings
 
(define line0 (cons "zzz" (cons "zzz" '())))
(define line1 '())
(define lls0 (cons line0 (cons line1 '())))

; --> File
(define (encode-file n)
  (write-file (string-append "encoded-" (substring n 3))
              (encode-text (read-words/line n))))

; LLS 
(check-expect (encode-text lls0)
              "122122122 122122122 \n\n")
 
(define (encode-text lls)
  (cond
    [(empty? lls) ""]
    [else (string-append (encode-line (first lls))
                         "\n"
                         (encode-text (rest lls)))]))

; List-of-string 
(check-expect
 (encode-line
  (cons "zzz"
        (cons "zzz" '())))
 "122122122 122122122 ")

(define (encode-line l)
  (cond
    [(empty? l) ""]
    [else
     (string-append (encode-each (explode (first l)))
                    " "
                    (encode-line (rest l)))]))

; List-of-1String 
(check-expect (encode-each (explode "zzz")) "122122122")

(define (encode-each l)
  (cond
    [(empty? l) ""]
    [else
     (string-append (encode-letter (first l))
                    (encode-each (rest l)))]))