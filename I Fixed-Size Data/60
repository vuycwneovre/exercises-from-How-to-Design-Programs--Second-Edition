;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname exercise-60-traffic-reloaded) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp")) #f)))
(require 2htdp/image)
(require 2htdp/universe)

(define RAD 10)         
(define SPACE (/ RAD 2)) 
(define MT (empty-scene (* RAD 10) (* RAD 3)))


(check-expect (tl-next-numeric 0) 1)
(check-expect (tl-next-numeric 1) 2)
(check-expect (tl-next-numeric 2) 0)



(define (tl-next-numeric cs) (modulo (+ cs 1) 3))

(define (tl-next cs)
  (cond [(string=? cs "red") "green"]
        [(string=? cs "yellow") "red"]
        [(string=? cs "green") "yellow"]))



(check-expect (tl-render 0)
              (overlay
               (beside (circle RAD "solid" "red")
                       (square SPACE "outline" "white")
                       (circle RAD "outline" "yellow")
                       (square SPACE "outline" "white")
                       (circle RAD "outline" "green"))
               MT))
(check-expect (tl-render 2)
              (overlay
               (beside (circle RAD "outline" "red")
                       (square SPACE "outline" "white")
                       (circle RAD "solid" "yellow")
                       (square SPACE "outline" "white")
                       (circle RAD "outline" "green"))
               MT))
(check-expect (tl-render 1)
              (overlay
               (beside (circle RAD "outline" "red")
                       (square SPACE "outline" "white")
                       (circle RAD "outline" "yellow")
                       (square SPACE "outline" "white")
                       (circle RAD "solid" "green"))
               MT))


(define (tl-render cs)
 (overlay
  (beside (bulb cs 0)
          (square SPACE "outline" "white")
          (bulb cs 2)
          (square SPACE "outline" "white")
          (bulb cs 1))
  MT))

(check-expect (conv 0) "red")
(check-expect (conv 1) "green")
(check-expect (conv 2) "yellow")

(define (conv tl)
  (cond [(equal? tl 0) "red"]
        [(equal? tl 1) "green"]
        [(equal? tl 2) "yellow"]))

(define (bulb on c)
  (if (= on c)
      (circle RAD "solid" (conv c))
      (circle RAD "outline" (conv c))))

(define (traffic-light-simulation initial-state)
  (big-bang initial-state
            [to-draw tl-render]
            [on-tick tl-next-numeric 1]))